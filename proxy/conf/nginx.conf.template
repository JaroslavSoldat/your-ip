user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    expires       $expires;
    resolver      127.0.0.11 valid=30s;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout     600;
    proxy_connect_timeout 600;
    proxy_send_timeout    600;
    proxy_read_timeout    600;
    send_timeout          600;

    client_max_body_size 0;

    gzip on;
    gzip_http_version 1.1;
    gzip_disable      "MSIE [1-6]\.";
    gzip_min_length   1100;
    gzip_vary         on;
    gzip_proxied      expired no-cache no-store private auth;
    gzip_types        text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_comp_level   9;

    map $sent_http_content_type $expires {
        default                    off;
        text/html                  epoch; #means no cache, as it is not a static page
        text/css                   1d;
        application/javascript     1d;
        application/woff2          1d;
        application/octet-stream   1d;
        ~image/                    1d;
    }

    server {
        root /usr/share/nginx/html;
        error_page 404 /;
    }

    server {
        listen 80 default;

        # Fools Nginx to avoid emerg halt during startup-time DNS check.
        set $upstream_url $UPSTREAM_URL;

        location / {
          proxy_pass $upstream_url;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-Host $host;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}
